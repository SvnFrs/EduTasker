generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Action {
  READ
  CREATE
  UPDATE
  DELETE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ProjectRole {
  LEADER
  MEMBER
  MENTOR
}

enum ProjectAction {
  READ
  CREATE
  UPDATE
  DELETE
}

model Role {
  id    String     @id @default(uuid()) @map("id")
  name  String     @map("name")
  code  String     @map("code")
  users UserRole[]

  @@unique([name, code])
  @@map("roles")
}

model UserRole {
  id     String @id @default(uuid()) @map("id")
  userId String @map("user_id")
  roleId String @map("role_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model User {
  id           String   @id @default(uuid()) @map("id")
  name         String   @map("name")
  email        String   @unique @map("email")
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  roles             UserRole[]
  projectsCreated   Project[]           @relation("ProjectCreatedBy")
  projectMembers    ProjectMember[]
  tasksCreated      Task[]              @relation("TaskCreatedBy")
  taskAssignees     TaskAssignee[]
  comments          Comment[]
  files             File[]
  notifications     Notification[]
  Mentor            Mentor?
  Student           Student?
  ProjectMentor     ProjectMentor[]
  ProjectPermission ProjectPermission[]

  @@map("users")
}

model Student {
  id          String @id @default(uuid())
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String @map("name")
  schoolEmail String @map("school_email")
  studentCode String @unique
  majorCode   String @map("major_code")
  joinYear    Int    @map("join_year")

  @@map("students")
}

model Mentor {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expertise String?
  bio       String?
  verified  Boolean @default(false)

  @@map("mentors")
}

model Project {
  id          String    @id @default(uuid()) @map("id")
  name        String    @map("name")
  description String?   @map("description")
  status      String    @default("active") @map("status")
  deadline    DateTime? @map("deadline")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  createdById String? @map("created_by_id")
  createdBy   User?   @relation("ProjectCreatedBy", fields: [createdById], references: [id])

  members           ProjectMember[]
  tasks             Task[]
  files             File[]
  Board             Board[]
  ProjectMentor     ProjectMentor[]
  ProjectPermission ProjectPermission[]

  @@map("projects")
}

model ProjectPermission {
  id        String  @id @default(uuid())
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  action   ProjectAction
  resource String

  @@unique([projectId, userId, action, resource])
  @@map("project_permissions")
}

model ProjectMember {
  id       String   @id @default(uuid()) @map("id")
  role     String   @default("member") @map("role")
  joinedAt DateTime @default(now()) @map("joined_at")

  projectId String  @map("project_id")
  userId    String  @map("user_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectMentor {
  id       String   @id @default(uuid()) @map("id")
  role     String   @default("mentor") @map("role")
  joinedAt DateTime @default(now()) @map("joined_at")

  projectId String  @map("project_id")
  userId    String  @map("user_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_mentors")
}

model Board {
  id    String @id @default(uuid())
  name  String
  order Int    @default(0)

  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@unique([projectId, order])
  @@map("boards")
}

model Task {
  id          String       @id @default(uuid()) @map("id")
  title       String       @map("title")
  description String?      @map("description")
  status      String       @default("todo") @map("status")
  priority    TaskPriority @default(MEDIUM) @map("priority")
  dueDate     DateTime?    @map("due_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  projectId   String  @map("project_id")
  createdById String? @map("created_by_id")
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User?   @relation("TaskCreatedBy", fields: [createdById], references: [id])

  assignees TaskAssignee[]
  comments  Comment[]
  Board     Board          @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String         @map("board_id")
  order     Int

  @@unique([boardId, order])
  @@map("tasks")
}

model TaskAssignee {
  id         String   @id @default(uuid()) @map("id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  taskId String @map("task_id")
  userId String @map("user_id")
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignees")
}

model Comment {
  id        String   @id @default(uuid()) @map("id")
  content   String   @map("content")
  createdAt DateTime @default(now()) @map("created_at")

  taskId String @map("task_id")
  userId String @map("user_id")
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model File {
  id        String   @id @default(uuid()) @map("id")
  fileName  String   @map("file_name")
  fileUrl   String   @map("file_url")
  createdAt DateTime @default(now()) @map("created_at")

  projectId    String  @map("project_id")
  uploadedById String? @map("uploaded_by_id")
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id], onDelete: SetNull)

  @@map("files")
}

model Notification {
  id        String   @id @default(uuid()) @map("id")
  message   String   @map("message")
  type      String   @default("info") @map("type")
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
